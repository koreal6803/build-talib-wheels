name: Build TA-Lib Wheels (from PyPI)

on:
  workflow_dispatch: # Allows manual triggering via GitHub UI or gh CLI
  push:
    branches: [ "main" ] # Optional: trigger on pushes to main

# Define the TA-Lib version at the top level for easy access in steps
env:
  TA_LIB_VERSION: "0.4.28" # Specify the desired version, or leave empty for latest

jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.os }} / Py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # MODIFIED: Limit OS and Python versions for testing
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12'] # Test only with Python 3.12

    steps:
    - name: Checkout repository (optional but good practice)
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # --- Install C TA-Lib Library (Platform Specific) ---

    - name: Install TA-Lib (Linux - Build from Source)
      if: runner.os == 'Linux'
      run: |
        # Install build dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Download TA-Lib source
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        # Build and install TA-Lib C library (installs to /usr by default)
        ./configure --prefix=/usr
        make
        sudo make install
        cd .. # Go back to the workspace root

    - name: Install TA-Lib (macOS)
      if: runner.os == 'macOS'
      run: brew install ta-lib

    - name: Install TA-Lib (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $url = "http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-msvc.zip"
        $outputFile = "${{ github.workspace }}\ta-lib.zip"
        # Extract to a sub-directory within the workspace
        $extractPath = "${{ github.workspace }}\ta-lib-c"
        New-Item -ItemType Directory -Path $extractPath -Force | Out-Null # Ensure directory exists

        Write-Host "Downloading TA-Lib C library to $outputFile..."
        Invoke-WebRequest -Uri $url -OutFile $outputFile
        Write-Host "Verifying download..."
        if (-not (Test-Path $outputFile)) { throw "Download failed: $outputFile not found." }
        if ((Get-Item $outputFile).Length -lt 1MB) { throw "Download failed: File size too small."} # Basic size check

        Write-Host "Extracting TA-Lib C library to $extractPath..."
        Expand-Archive -Path $outputFile -DestinationPath $extractPath -Force
        Write-Host "TA-Lib extracted to $extractPath\ta-lib" # Note: zip extracts into a 'ta-lib' subfolder

    # --- Set Environment Variables for Python Build ---

    - name: Set TA-Lib environment variables (macOS)
      if: runner.os == 'macOS'
      run: echo "TA_LIBRARY_PATH=$(brew --prefix ta-lib)/lib" >> $GITHUB_ENV

    - name: Set TA-Lib environment variables (Windows)
      if: runner.os == 'Windows'
      shell: pwsh # Use pwsh to ensure consistency with GITHUB_WORKSPACE expansion
      run: |
        # Point to the include/lib directories inside the extracted folder
        echo "TA_INCLUDE_PATH=${{ github.workspace }}\ta-lib-c\ta-lib\c\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "TA_LIBRARY_PATH=${{ github.workspace }}\ta-lib-c\ta-lib\c\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "Set TA paths:"
        echo "  Include: ${{ github.workspace }}\ta-lib-c\ta-lib\c\include"
        echo "  Library: ${{ github.workspace }}\ta-lib-c\ta-lib\c\lib"

    # --- Install Build Dependencies & NumPy >= 2.0 ---
    - name: Install Python build dependencies and NumPy
      # Specify numpy>=2.0
      run: python -m pip install --upgrade pip setuptools wheel build "numpy>=2.0"

    # --- Build the Wheel from PyPI Source ---
    - name: Download TA-Lib sdist from PyPI
      run: |
        mkdir sdist_dir
        if [ -z "${{ env.TA_LIB_VERSION }}" ]; then
          echo "Downloading latest TA-Lib sdist..."
          # --no-deps is important here, we installed numpy already
          python -m pip download --no-deps --no-binary :all: TA-Lib -d sdist_dir
        else
          echo "Downloading TA-Lib sdist version ${{ env.TA_LIB_VERSION }}..."
          # --no-deps is important here, we installed numpy already
          python -m pip download --no-deps --no-binary :all: "TA-Lib==${{ env.TA_LIB_VERSION }}" -d sdist_dir
        fi

    - name: List downloaded sdist
      run: ls -l sdist_dir

    - name: Build wheel from sdist
      # This will use the already installed NumPy
      run: python -m build --wheel sdist_dir/*.tar.gz -o dist

    # --- Upload the Wheel as an Artifact ---
    - name: Upload Wheels
      uses: actions/upload-artifact@v4
      with:
        name: talib-wheel-${{ matrix.os }}-py${{ matrix.python-version }}-${{ env.TA_LIB_VERSION || 'latest' }}
        path: dist/*.whl
        if-no-files-found: error
