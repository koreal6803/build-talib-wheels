name: Build TA-Lib Wheels (from PyPI)

on:
  workflow_dispatch: # Allows manual triggering via GitHub UI or gh CLI
  push:
    branches: [ "main" ] # Optional: trigger on pushes to main

# Define the TA-Lib version at the top level for easy access in steps
env:
  # === USER ACTION: Verify/Change this version ===
  TA_LIB_PY_VERSION: "0.6.3" # Python TA-Lib package version from PyPI

jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.os }} / Py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.12'] # Expand as needed

    steps:
    - name: Checkout repository (optional but good practice)
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # --- Install C TA-Lib Library (Platform Specific) ---
    - name: Install TA-Lib C Library (Linux - Build from Source 0.4.0)
      if: runner.os == 'Linux'
      run: |
        echo "Installing build tools..."
        sudo apt-get update -qq
        sudo apt-get install -y -qq build-essential wget
        echo "Downloading TA-Lib C library source (0.4.0)..."
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz -O ta-lib-0.4.0-src.tar.gz -q
        echo "Extracting source..."
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        echo "Configuring TA-Lib C library..."
        ./configure --prefix=/usr > configure.log 2>&1 || (cat configure.log && exit 1)
        echo "Building TA-Lib C library..."
        make > make.log 2>&1 || (cat make.log && exit 1)
        echo "Installing TA-Lib C library..."
        sudo make install > make_install.log 2>&1 || (cat make_install.log && exit 1)
        echo "TA-Lib C library installation complete."
        cd .. # Go back to the workspace root

    - name: Install TA-Lib C Library (macOS via Homebrew)
      if: runner.os == 'macOS'
      run: |
        echo "Updating Homebrew..."
        brew update --quiet
        echo "Installing TA-Lib C library..."
        brew install ta-lib
        echo "TA-Lib C library installed via Homebrew."
        # Set environment variable for the build step, pointing to brew installation
        echo "TA_LIBRARY_PATH=$(brew --prefix ta-lib)/lib" >> $GITHUB_ENV
        echo "TA_INCLUDE_PATH=$(brew --prefix ta-lib)/include" >> $GITHUB_ENV
        echo "TA_LIBRARY_PATH set to: $(brew --prefix ta-lib)/lib"
        echo "TA_INCLUDE_PATH set to: $(brew --prefix ta-lib)/include"

    # --- Install Build Dependencies & NumPy >= 2.0 ---
    - name: Install Python build dependencies and NumPy
      run: python -m pip install --upgrade pip setuptools wheel build "numpy>=2.0"

    # --- Download TA-Lib sdist from PyPI ---
    - name: Download TA-Lib sdist from PyPI
      run: |
        mkdir sdist_dir
        echo "Downloading TA-Lib sdist version ${{ env.TA_LIB_PY_VERSION }} from PyPI..."
        python -m pip download --no-deps --no-binary :all: "TA-Lib==${{ env.TA_LIB_PY_VERSION }}" -d sdist_dir
        if [ $? -ne 0 ]; then
          echo "::error::Failed to download TA-Lib sdist version ${{ env.TA_LIB_PY_VERSION }}"
          exit 1
        fi

    - name: List downloaded sdist
      run: ls -l sdist_dir

    # --- Extract sdist ---
    - name: Extract sdist
      run: |
        mkdir build_dir
        tar -xzf sdist_dir/TA-Lib-${{ env.TA_LIB_PY_VERSION }}.tar.gz -C build_dir
        ls -l build_dir

    # --- Build the Wheel from Extracted sdist ---
    - name: Build wheel from sdist
      run: |
        echo "Building wheel for TA-Lib ${{ env.TA_LIB_PY_VERSION }}..."
        python -m build --wheel build_dir/TA-Lib-${{ env.TA_LIB_PY_VERSION }} -o dist
        if [ $? -ne 0 ]; then
          echo "::error::Failed to build wheel from sdist."
          exit 1
        fi
        echo "Wheel build completed successfully."

    - name: List built wheel
      run: ls -l dist

    # --- Upload the Wheel as an Artifact ---
    - name: Upload Wheels
      uses: actions/upload-artifact@v4
      with:
        name: talib-wheel-${{ matrix.os }}-py${{ matrix.python-version }}-${{ env.TA_LIB_PY_VERSION }}
        path: dist/*.whl
        if-no-files-found: error # Fail the workflow if no wheel was built

