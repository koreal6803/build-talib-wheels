name: Build TA-Lib Wheels (from PyPI)

on:
  workflow_dispatch: # Allows manual triggering via GitHub UI or gh CLI
  push:
    branches: [ "main" ] # Optional: trigger on pushes to main

# Optional: Pin the TA-Lib version you want to build for consistency
env:
  TA_LIB_VERSION: "0.4.28" # Specify the desired version, or leave empty for latest

jobs:
  build_wheels:
    name: Build wheel ${{ env.TA_LIB_VERSION }} for ${{ matrix.os }} / Py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository (optional but good practice)
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # --- Install C TA-Lib Library (Platform Specific) ---
    - name: Install TA-Lib (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libta-lib-dev

    - name: Install TA-Lib (macOS)
      if: runner.os == 'macOS'
      run: brew install ta-lib

    - name: Install TA-Lib (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $url = "http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-msvc.zip"
        $outputFile = "ta-lib.zip"
        $extractPath = "C:\" # Extracts to C:\ta-lib
        Write-Host "Downloading TA-Lib C library..."
        Invoke-WebRequest -Uri $url -OutFile $outputFile
        Write-Host "Extracting TA-Lib C library to $extractPath..."
        Expand-Archive -Path $outputFile -DestinationPath $extractPath -Force
        Write-Host "TA-Lib extracted to C:\ta-lib"

    # --- Set Environment Variables for Python Build ---
    - name: Set TA-Lib environment variables (macOS)
      if: runner.os == 'macOS'
      run: echo "TA_LIBRARY_PATH=$(brew --prefix ta-lib)/lib" >> $GITHUB_ENV

    - name: Set TA-Lib environment variables (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "TA_INCLUDE_PATH=C:\ta-lib\c\include" >> $GITHUB_ENV
        echo "TA_LIBRARY_PATH=C:\ta-lib\c\lib" >> $GITHUB_ENV

    # --- Build the Wheel from PyPI Source ---
    - name: Install build dependencies
      run: python -m pip install --upgrade pip wheel build

    - name: Download TA-Lib sdist from PyPI
      run: |
        mkdir sdist_dir
        python -m pip download --no-deps --no-binary :all: "TA-Lib==${{ env.TA_LIB_VERSION }}" -d sdist_dir
      # If TA_LIB_VERSION is empty, use:
      # python -m pip download --no-deps --no-binary :all: TA-Lib -d sdist_dir

    - name: List downloaded sdist
      run: ls -l sdist_dir

    - name: Build wheel from sdist
      run: python -m build --wheel sdist_dir/*.tar.gz -o dist

    # --- Upload the Wheel as an Artifact ---
    - name: Upload Wheels
      uses: actions/upload-artifact@v4
      with:
        name: talib-wheel-${{ matrix.os }}-py${{ matrix.python-version }}-${{ env.TA_LIB_VERSION || 'latest' }}
        path: dist/*.whl
        if-no-files-found: error
