name: Build TA-Lib Wheels (from PyPI)

on:
  workflow_dispatch: # Allows manual triggering via GitHub UI or gh CLI
  push:
    branches: [ "main" ] # Optional: trigger on pushes to main

# Define the TA-Lib version at the top level for easy access in steps
env:
  # === USER ACTION: Verify/Change this version ===
  TA_LIB_VERSION: "0.6.3" # Set to the Python TA-Lib package version you want to build
  # Define the C library version and URL for Windows
  TA_LIB_C_VERSION_WINDOWS: "0.6.4"
  TA_LIB_MSI_URL: "https://github.com/ta-lib/ta-lib/releases/download/v0.6.4/ta-lib-0.6.4-windows-x86_64.msi"

jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.os }} / Py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Still limited for testing, expand python-version/os later if desired
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12']

    steps:
    - name: Checkout repository (optional but good practice)
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # --- Install C TA-Lib Library (Platform Specific) ---

    - name: Install TA-Lib (Linux - Build from Source)
      if: runner.os == 'Linux'
      run: |
        # Install build dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Download TA-Lib source (Using 0.4.0 as that's the common source version)
        # If building a Python wrapper linked to C v0.6.4 is needed, the source/build might differ.
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz -O ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        # Build and install TA-Lib C library (installs to /usr by default)
        ./configure --prefix=/usr
        make
        sudo make install
        cd .. # Go back to the workspace root

    - name: Install TA-Lib (macOS)
      if: runner.os == 'macOS'
      run: brew install ta-lib # Brew usually provides a reasonably recent version

    # MODIFIED: Download and run the official MSI installer for Windows
    - name: Install TA-Lib C Library (Windows via MSI)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $msiUrl = "${{ env.TA_LIB_MSI_URL }}"
        $outputFile = "${{ github.workspace }}\ta-lib-${{ env.TA_LIB_C_VERSION_WINDOWS }}.msi"

        Write-Host "Downloading TA-Lib C library MSI from $msiUrl..."
        try {
          # Use a reasonable timeout (e.g., 300 seconds = 5 minutes)
          Invoke-WebRequest -Uri $msiUrl -OutFile $outputFile -TimeoutSec 300 -ErrorAction Stop
        } catch {
          throw "Failed to download MSI: $($_.Exception.Message)"
        }

        Write-Host "Verifying downloaded MSI..."
        if (-not (Test-Path $outputFile)) { throw "MSI download verification failed: $outputFile not found." }
        # Add a basic size check if desired (e.g., > 1MB)
        # if ((Get-Item $outputFile).Length -lt 1MB) { throw "MSI download verification failed: File size too small."}

        Write-Host "Running TA-Lib C library MSI installer silently..."
        # Use msiexec for silent installation
        # /i installs the product
        # /qn provides a quiet installation with no UI
        # /norestart prevents automatic restarts
        $msiexecArgs = @("/i", "`"$outputFile`"", "/qn", "/norestart", "/L*v", "`"${{ github.workspace }}\ta-lib-install.log`"")
        Write-Host "Executing: msiexec $($msiexecArgs -join ' ')"
        Start-Process msiexec -ArgumentList $msiexecArgs -Wait -PassThru
        # Check exit code (0 usually means success)
        if ($LASTEXITCODE -ne 0) {
            Write-Error "MSI installation failed with exit code $LASTEXITCODE. Check log: ${{ github.workspace }}\ta-lib-install.log"
            # Optional: Dump log content on failure
            # Get-Content "${{ github.workspace }}\ta-lib-install.log" -Tail 50
            exit $LASTEXITCODE
        } else {
            Write-Host "MSI installation completed successfully (Exit Code: $LASTEXITCODE)."
        }
        # Optional: Verify expected installation files/directories if needed

    # --- Set Environment Variables for Python Build ---
    # Note: Explicit Windows vars removed as MSI installer should handle registration.

    - name: Set TA-Lib environment variables (macOS)
      if: runner.os == 'macOS'
      # Keep this for macOS brew, might still be needed depending on setup.py robustness
      run: echo "TA_LIBRARY_PATH=$(brew --prefix ta-lib)/lib" >> $GITHUB_ENV

    # REMOVED: Set TA-Lib environment variables (Windows) - Handled by MSI installer

    # --- Install Build Dependencies & NumPy >= 2.0 ---
    - name: Install Python build dependencies and NumPy
      run: python -m pip install --upgrade pip setuptools wheel build "numpy>=2.0"

    # --- Build the Wheel from PyPI Source ---
    - name: Download TA-Lib sdist from PyPI
      run: |
        mkdir sdist_dir
        if [ -z "${{ env.TA_LIB_VERSION }}" ]; then
          echo "Downloading latest TA-Lib sdist..."
          python -m pip download --no-deps --no-binary :all: TA-Lib -d sdist_dir
        else
          echo "Downloading TA-Lib sdist version ${{ env.TA_LIB_VERSION }}..."
          python -m pip download --no-deps --no-binary :all: "TA-Lib==${{ env.TA_LIB_VERSION }}" -d sdist_dir
        fi

    - name: List downloaded sdist
      run: ls -l sdist_dir

    - name: Build wheel from sdist
      # This will use the pre-installed C library (via build/brew/MSI) and NumPy
      run: python -m build --wheel sdist_dir/*.tar.gz -o dist

    # --- Upload the Wheel as an Artifact ---
    - name: Upload Wheels
      uses: actions/upload-artifact@v4
      with:
        name: talib-wheel-${{ matrix.os }}-py${{ matrix.python-version }}-${{ env.TA_LIB_VERSION || 'latest' }}
        path: dist/*.whl
        if-no-files-found: error

